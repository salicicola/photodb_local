##from django.db import models

from django.contrib.gis.db import models
from django.utils.safestring import mark_safe


# Create your models here.

"""
Could not find the GDAL library
sudo pip install gdal :: errors
sudo apt-get install gdal-bin
gdalinfo --version >>> GDAL 3.0.4, released 2020/01/28
>> python3 manage.py check OK
since adding class ::
module 'django.contrib.gis.db.models' has no attribute 'GeoManager' :: advice
from django.db.models import Manager as GeoManager
makemigrations passed but migrate :: 'DatabaseOperations' object has no attribute 'geo_db_type'
change to spatilalite
Unable to load the SpatiaLite library extension.
? sudo apt-get install libsqlite3-mod-spatialite >>> migrate passed
copied gis_Town,xml from geodjango removed first lines and OK:
Installed 631 object(s) from 1 fixture(s)
passed but then
gis/openlayers.html add :: 'django.contrib.gis', and replace gis to gisapp
Installed 116 object(s) from 1 fixture(s) [Locality]

"""
from django.db.models import Manager as GeoManager

print ("finishing gis.models")

class USCounty(models.Model):
    name = models.CharField(max_length=32)
    state_name = models.CharField(max_length=25)
    state_fips = models.CharField(max_length=2)
    cnty_fips = models.CharField(max_length=3)
    fips = models.CharField(max_length=5)
    geometry = models.MultiPolygonField(srid=4326)
    objects = GeoManager()

    class Meta:
        verbose_name_plural = "US Counties"
  
    # Returns the string representation of the model.        
    def __unicode__(self):
        return self.name
 

class MACounty(models.Model):
    """ from multi version: counties_polum.shp :: OK, to rename into MACounty"""
    objectid = models.IntegerField()
    fips_id = models.IntegerField()
    state = models.CharField(max_length=2, default="MA")
    county = models.CharField(max_length=15)
    lcid = models.CharField(max_length=21, default="", null=True, blank=True)
    area_acres = models.FloatField()
    shape_area = models.FloatField()
    shape_len = models.FloatField()
    geom = models.MultiPolygonField(srid=4326)
    objects = GeoManager()

    class Meta:
        verbose_name_plural = "MA Counties"

    # Returns the string representation of the model.        
    def __unicode__(self):
        return "%s %s" % (self.state, self.county)


class Town(models.Model):
    town = models.CharField(max_length=21,null=True, blank=True)
    state = models.CharField(max_length=21, default="MA",null=True, blank=True)
    county = models.CharField(max_length=21, default="", null=True, blank=True)
    lcid = models.CharField(max_length=21, default="", null=True, blank=True)
    type = models.CharField(max_length=2, null=True, blank=True)
    shape_area = models.FloatField(null=True, blank=True)
    shape_len = models.FloatField(null=True, blank=True)
    geom = models.MultiPolygonField(srid=4326)
    ##objects = models.GeoManager()
    objects = GeoManager()

    class Meta:
        verbose_name_plural = "MA Towns"

    # Returns the string representation of the model.        
    def __str__(self):
        return self.town

class Locality(models.Model):
    """
    
    A geographic model based on the v3 of the simplified world borders multipolygon shapefile
    from http://thematicmapping.org/downloads/world_borders.php.
    
    Field names, Django types, and max_lengths were autogenerated using the ogrinspect utility with hand
    edits to add alternative field names and help_text.
    
    Imported using LayerMapping (requires GDAL) called within the load_data.py script provided
    within this sample project.
    
    All fields match the source dataset, an ESRI format shapefile made up of several related files:
    .shp - holds the vector data that is to be stored in the MultiPolygonField field named'geometry'.
    .shx - spatial index file for geometries stored in the .shp.
    .dbf - database file for holding attribute data (can be opened in excel and open office).
    .prj - contains the spatial reference information for the geometries stored in the .shp
      

    """
    #### XXX
    # Regular Django fields corresponding to the attributes in the
    # world borders shapefile
    name = models.CharField(max_length=50)
    area = models.IntegerField(help_text="Area of Country in SQ meters", default=0)
    lcid = models.CharField(max_length=50)
    region = models.CharField(max_length=50)
    subregion = models.CharField(max_length=50)
    lon = models.FloatField('Longitude',help_text="Longitude of centerpoint")
    lat = models.FloatField('Latitude',help_text="Latitude of centerpoint")
    
    # GeoDjango-specific: a geometry field (MultiPolygonField), and
    # overriding the default manager with a GeoManager instance.
    geometry = models.MultiPolygonField('Country Border',srid=4326)
    objects = GeoManager()

    # So the model is pluralized correctly in the admin.
    class Meta:
        verbose_name_plural = "Localities"

    # Returns the string representation of the model.        
    def __str__(self):
        return ("%s [%s]" % (self.name, self.lcid))


class Openspace(models.Model):
    site_name = models.CharField(max_length=120, null=True, blank=True)
    lcid = models.CharField(max_length=120, null=True, blank=True)
    lcid_name = models.CharField(max_length=120, null=True, blank=True)
    fee_owner = models.CharField(max_length=100, null=True, blank=True)
    owner_abrv = models.CharField(max_length=20, null=True, blank=True)
    owner_type = models.CharField(max_length=1, null=True, blank=True)
    manager = models.CharField(max_length=100, null=True, blank=True)
    pub_access = models.CharField(max_length=1, null=True, blank=True)
    oli_1_org = models.CharField(max_length=100, null=True, blank=True)
    oli_1_abrv = models.CharField(max_length=20, null=True, blank=True)
    gis_acres = models.FloatField(null=True)
    shape_area = models.FloatField(null=True)
    shape_len = models.FloatField(null=True)
    geom = models.MultiPolygonField(srid=4326) ## for Spatial Index should not be null, complain from MySQL, not by Postgre
						## ? all parts of Spatial Index must not be null vsyo ravno
    ## CREATE SPATIAL INDEX `locations_openspace_geom_id` ON `locations_openspace`(`geom`);
    ##    
    objects = GeoManager()

    class Meta:
        verbose_name_plural = "Openspace"

    # Returns the string representation of the model.        
    def __str__(self):
        return self.site_name
